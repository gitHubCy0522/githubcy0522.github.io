<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 新人来也匆匆的博客</title>
    <link>https://githubcy0522.github.io/post/</link>
    <description>Recent content in Posts on 新人来也匆匆的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 15 Jul 2019 02:14:25 +0800</lastBuildDate>
    
	<atom:link href="https://githubcy0522.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MyBatis基础知识</title>
      <link>https://githubcy0522.github.io/post/mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 15 Jul 2019 02:14:25 +0800</pubDate>
      
      <guid>https://githubcy0522.github.io/post/mybatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;p&gt;mybatis是一个持久层的框架，是apache下的顶级项目。mybatis 托管 到 goolecode 下， 再后来托管到 github 下。
mybatis让程序将主要精力放在 sql上，通过mybatis提供映射方式，来自由灵活生成（半自动化，大部分需要程序员编写 sql）满足需求的 sql 语句。
mybatis 可以将向 preparedStatement 中的输入参数自动进行&lt;strong&gt;输入映射&lt;/strong&gt;，将查询结果集灵活的映射成java对象。（&lt;strong&gt;输出映射&lt;/strong&gt;）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MyBatis 与 Spring 的整合</title>
      <link>https://githubcy0522.github.io/post/mybatis-%E4%B8%8E-spring-%E7%9A%84%E6%95%B4%E5%90%88/</link>
      <pubDate>Mon, 15 Jul 2019 01:55:10 +0800</pubDate>
      
      <guid>https://githubcy0522.github.io/post/mybatis-%E4%B8%8E-spring-%E7%9A%84%E6%95%B4%E5%90%88/</guid>
      <description>&lt;p&gt;spring 开发完 3.2.13 版本后，mybatis 3.2.2 尚未开发完毕，mybatis 3.2.2 自己开发一个整合 spring 3.2.13 的驱动包，&lt;u&gt;mybatis-spring-1.2.0.jar。&lt;/u&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring核心概念</title>
      <link>https://githubcy0522.github.io/post/blog/</link>
      <pubDate>Sun, 14 Jul 2019 21:31:48 +0800</pubDate>
      
      <guid>https://githubcy0522.github.io/post/blog/</guid>
      <description>&lt;p&gt;##核心概念之IOC
IOC（控制反转），为了降低程序对象之间的耦合度，spring把对象的创建和维护的&lt;strong&gt;控制权&lt;/strong&gt;，由应用程序转移到部第三方工厂或spring容器中，这样控制权的转移，称为控制反转&lt;/p&gt;

&lt;p&gt;又称为（依赖注入），spring容器启动时，spring会根据依赖对象之间的关系，将依赖对象注入到组件中。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>